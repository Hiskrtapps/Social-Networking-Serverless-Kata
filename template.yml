AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: ProjectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Resources:

  #PostCommentApi:
  #  Type: AWS::Serverless::Api
  #  Properties:
  #    StageName: Prod
  #    Cors: "'*'"
  #    Auth:
  #      DefaultAuthorizer: SNSKAuthorizer
  #      Authorizers:
  #        SNSKAuthorizer:
  #          UserPoolArn: !GetAtt SNSKUserPool.Arn

  GetComments:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-GetComments'
      Handler: io.github.hiskrtapps.snsk.handler.GetCommentsHandler
      Runtime: java11
      MemorySize: 512
      Timeout: 20
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /comments/
            Method: get
  PostComment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-PostComment'
      Handler: io.github.hiskrtapps.snsk.handler.PostCommentHandler
      Runtime: java11
      MemorySize: 512
      Timeout: 20
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            #RestApiId: !Ref PostCommentApi
            Path: /comments/
            Method: post

  Message:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'awscodestar-${ProjectId}_Message'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: recentness
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: recentness
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: MoreRecentsFirst
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: recentness
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  #SNSKUserPool:
  #  Type: AWS::Cognito::UserPool
  #  Properties:
  #    UserPoolName: !Ref CognitoUserPoolName
  #    Policies:
  #      PasswordPolicy:
  #        MinimumLength: 8
  #    UsernameAttributes:
  #      - email
  #    Schema:
  #      - AttributeDataType: String
  #        Name: email
  #        Required: false

  #SNSKUserPoolClient:
  #  Type: AWS::Cognito::UserPoolClient
  #  Properties:
  #    UserPoolId: !Ref SNSKUserPool
  #    ClientName: !Ref CognitoUserPoolClientName
  #    GenerateSecret: false

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
